<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>部署 on Nebula Graph - An Open Source, Distributed and High Performant Graph Database</title><link>https://nebula-graph.io/cn/tags/%E9%83%A8%E7%BD%B2/</link><description>Recent content in 部署 on Nebula Graph - An Open Source, Distributed and High Performant Graph Database</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 26 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nebula-graph.io/cn/tags/%E9%83%A8%E7%BD%B2/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes 部署 Nebula 图数据库集群</title><link>https://nebula-graph.io/cn/posts/how-to-deploy-nebula-graph-in-kubernetes/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/cn/posts/how-to-deploy-nebula-graph-in-kubernetes/</guid><description>Kubernetes 是什么 Kubernetes 是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效，Kubernetes 提供了应用部署，规划，更新，维护的一种机制。Kubernetes 在设计结构上定义了一系列的构建模块，其目的是为了提供一个可以部署、维护和扩展应用程序的机制，组成 Kubernetes 的组件设计概念为松耦合和可扩展的，这样可以使之满足多种不同的工作负载。可扩展性在很大程度上由 Kubernetes API 提供，此 API 主要被作为扩展的内部组件以及 Kubernetes 上运行的容器来使用。
Kubernetes 主要由以下几个核心组件组成：
etcd 保存了整个集群的状态 apiserver 提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制 controller manager 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等 scheduler 负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上 kubelet 负责维护容器的生命周期，同时也负责 Volume和网络的管理 Container runtime 负责镜像管理以及 Pod 和容器的真正运行（CRI） kube-proxy 负责为 Service 提供 cluster 内部的服务发现和负载均衡 除了核心组件，还有一些推荐的 Add-ons：
kube-dns 负责为整个集群提供 DNS 服务 Ingress Controller 为服务提供外网入口 Heapster 提供资源监控 Dashboard 提供 GUI Federation 提供跨可用区的集群 Fluentd-elasticsearch 提供集群日志采集、存储与查询 Kubernetes 和数据库 数据库容器化是最近的一大热点，那么 Kubernetes 能为数据库带来什么好处呢？
故障恢复: Kubernetes 提供故障恢复的功能，数据库应用如果宕掉，Kubernetes 可以将其自动重启，或者将数据库实例迁移到集群中其他节点上 存储管理: Kubernetes 提供了丰富的存储接入方案，数据库应用能透明地使用不同类型的存储系统 负载均衡: Kubernetes Service 提供负载均衡功能，能将外部访问平摊给不同的数据库实例副本上 水平拓展: Kubernetes 可以根据当前数据库集群的资源利用率情况，缩放副本数目，从而提升资源的利用率 目前很多数据库，如：MySQL，MongoDB 和 TiDB 在 Kubernetes 集群中都能运行很良好。</description></item><item><title>使用 Docker 构建 Nebula Graph 源码</title><link>https://nebula-graph.io/cn/posts/build-nebula-graph-source-code-with-docker/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/cn/posts/build-nebula-graph-source-code-with-docker/</guid><description>Nebula Graph 介绍 Nebula Graph 是开源的高性能分布式图数据库。项目使用 C++ 语言开发，cmake 工具构建。其中两个重要的依赖是 Facebook 的 Thrift RPC 框架和 folly 库.
由于项目采用了 C++ 14 标准开发，需要使用较新版本的编译器和一些三方库。虽然 Nebula Graph 官方给出了一份开发者构建指南，但是在本地构建完整的编译环境依然不是一件轻松的事。
开发环境构建 Nebula Graph 依赖较多，且一些第三方库需本地编译安装，为了方便开发者本地编译项目源码， Nebula Graph 官方为大家提供了一个预安装所有依赖的 [docker 镜像](docker hub)。开发者只需如下的三步即可快速的编译 Nebula Graph 工程，参与 Nebula Graph 的开源贡献：
本地安装好 Docker
将 vesoft/nebula-dev 镜像 pull 到本地
$ docker pull vesoft/nebula-dev 运行 Docker 并挂载 Nebula 源码目录到容器的 /home/nebula 目录 $ docker run --rm -ti -v {nebula-root-path}:/home/nebula vesoft/nebula-dev bash 感谢社区伙伴 @阿东 提的建议，把上面的 {nebula-root-path} 替换成你 Nebula Graph 实际 clone 的目录</description></item><item><title>图数据库 Nebula Graph 的安装部署</title><link>https://nebula-graph.io/cn/posts/nebula-graph-database-deployment/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/cn/posts/nebula-graph-database-deployment/</guid><description>Nebula Graph：一个开源的分布式图数据库。作为唯一能够存储万亿个带属性的节点和边的在线图数据库，Nebula Graph 不仅能够在高并发场景下满足毫秒级的低时延查询要求，还能够实现服务高可用且保障数据安全性。
本文目录 简介 Nebula 整体架构 Meta Service Storage Service Graph Service 安装部署 单机运行 集群部署 环境准备 安装 配置 测试集群 简介 Nebula Graph 是开源的第三代分布式图数据库，不仅能够存储万亿个带属性的节点和边，而且还能在高并发场景下满足毫秒级的低时延查询要求。不同于 Gremlin 和 Cypher，Nebula 提供了一种 SQL-LIKE 的查询语言 nGQL，通过三种组合方式（管道、分号和变量）完成对图的 CRUD 的操作。在存储层 Nebula Graph 目前支持 RocksDB 和 HBase 两种方式。
感谢 Nebula Graph 社区 Committer 伊兴路供稿本文。
Nebula Graph 整体架构 Nebula Graph 主要有三个服务进程：
Meta Service Meta Service 是整个集群的元数据管理中心，采用 Raft 协议保证高可用。主要提供两个功能:</description></item></channel></rss>