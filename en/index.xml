<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nebula Graph - An Open Source, Distributed and High Performant Graph Database</title><link>https://nebula-graph.io/en/</link><description>Recent content on Nebula Graph - An Open Source, Distributed and High Performant Graph Database</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 24 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://nebula-graph.io/en/index.xml" rel="self" type="application/rss+xml"/><item><title>How Nebula Graph Automatically Cleans Stale Data with TTL</title><link>https://nebula-graph.io/en/posts/clean-stale-data-with-ttl-in-nebula-graph_/</link><pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/clean-stale-data-with-ttl-in-nebula-graph_/</guid><description>Introduction In the era of big data, we are processing data in TB, PB, or even EB. How to deal with huge data sets is a common problem for those working in the database field.
At the core of this problem is whether the data stored in the database is still valid and useful. Therefore, such topics as how to improve the utilization rate of valid data and filter the invalid/outdated data have attracted great concerns globally.</description></item><item><title>Automating Your Project Processes with Github Actions</title><link>https://nebula-graph.io/en/posts/github-action-automating-project-process/</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/github-action-automating-project-process/</guid><description>Foreword It&amp;rsquo;s common in both company and personal projects to use tools to deal with replicated tasks to improve efficiency.
This is especially true for the front-end development, because tackling with the repetitive tasks manually like building, deployment, unit testing is rather tedious and time-consuming.
This post introduces how we use Github Action to automatically deploy our front-end release in Nebula Graph.
What is Github Action Actions are tasks that can be triggered under certain conditions.</description></item><item><title>How Indexing Works in Nebula Graph</title><link>https://nebula-graph.io/en/posts/how-indexing-works-in-nebula-graph/</link><pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/how-indexing-works-in-nebula-graph/</guid><description>Why indexing is needed in a graph database Indexing is an indispensable function in a database system. Graph database is no exception.
An index is actually a sorted data structure in the database management system. Different database systems adopt different sorting structures.
Popular index types include:
B-Tree index B+-Tree index B*-Tree index Hash index Bitmap index Inverted index Each of them uses their own sorting algorithms.
A database index allows efficient data retrieval from databases.</description></item><item><title>Graph Query Language Comparison Series - Gremlin vs Cypher vs nGQL</title><link>https://nebula-graph.io/en/posts/graph-query-language-comparison-cypher-gremlin-ngql/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/graph-query-language-comparison-cypher-gremlin-ngql/</guid><description>In September 2019, Graph Query Language is accepted as a new database query language in a vote by the International SQL Standards Committee, the unification of GQL takes time. In this post, we&amp;rsquo;ve selected some mainstream graph query languages and compared the CRUD usage in these languages respectively.
Which Graph Query Languages to Be Compared Gremlin Gremlin is a graph traversal language developed by Apache TinkerPop and has been adopted by a lot of graph database solutions.</description></item><item><title>How to Deploy Nebula Graph on Kubernetes</title><link>https://nebula-graph.io/en/posts/how-to-deploy-nebula-graph-in-kubernetes/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/how-to-deploy-nebula-graph-in-kubernetes/</guid><description>What is Kubernetes Kubernetes (commonly stylized as k8s) is an open-source container-orchestration system, aiming to provide a simple yet efficient platform for automating deployment, scaling, and operations of application containers across clusters of hosts.
Kubernetes has a series of components architecturally, enabling a mechanism that can provide deployment, maintenance, and extension of applications.
The components are designed to be loosely coupled and scalable so that they can meet various kinds of workloads.</description></item><item><title>An Introduction to Google's Memory Error Detect Tool AddessSanitizer</title><link>https://nebula-graph.io/en/posts/introduction-to-google-memory-detect-tool-addresssanitizer/</link><pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/introduction-to-google-memory-detect-tool-addresssanitizer/</guid><description>As a C/C++ developer, you will encounter various problems during development, the most common ones are memory usage issues such as out of bounds, leakage.
Previously the most commonly used memory error detect tool was Valgrind, but the biggest problem with Valgrind is that it will greatly reduce program speed, by 10 times by estimate.
Good news is the Google-developed memory error detect tool, AddressSanitizer (aka ASan), has greatly improved the program slowdown to two times only on average, which is very fast.</description></item><item><title>How to Reduce Docker Image Size</title><link>https://nebula-graph.io/en/posts/how-to-reduce-docker-image-size/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/how-to-reduce-docker-image-size/</guid><description>If there are top ten buzzwords in the technology industry in the year of 2019, container is sure to be one of them. With the popularity of Docker, more and more scenarios are using Docker in the front-end field. This article shows how do we use Docker in the visualization interface of Nebula Graph, a distributed open source graph database.
Why Using Docker Docker is widely used in daily front-end development.</description></item><item><title>Nebula Graph RC3 Release Note</title><link>https://nebula-graph.io/en/posts/nebula-graph-rc3-release-note/</link><pubDate>Fri, 07 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-rc3-release-note/</guid><description>Main features and fixes for this release include dump_tools to export data by specific filters, graph data exploring tool Nebula Graph Studio, and vertex/edge scan interface for OLAP scenarios. Below is a list of details.
Query engine Support fetching all props of a given vertex #1486 Support DELETE EDGE to delete the given edge #1063 Add IF EXISTS to conditionally drop a tag/edgetype only if it exists. #1505 Add IF NOT EXISTS to conditionally create a space/tag/edge only if it not exists #1379 Export graphd metrics #1451 Storage Add scan edge/vertex interface to retrieve data from storage for OLAP, #1381 Support heartbeat_interval_secs option to config heartbeat interval between storage/graph and meta #1540 Pushdown filter to minimize data transfer and improve query performance #947 Support local conf mode, using local conf rather than config in meta server #1411 Add timeout for storage/meta clients, the default value is 60s and configured by meta_client_timeout_ms option #1399 Support creating a snapshot for the whole cluster #1199 #1372 Both support reading from leader/follow and support only read from the leader #1363 Add check step for each balance task during balancing process.</description></item><item><title>Detect Corona Virus Spreading With Graph Database Based on a Real Case</title><link>https://nebula-graph.io/en/posts/detect-corona-virus-spreading-with-graph-database/</link><pubDate>Thu, 06 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/detect-corona-virus-spreading-with-graph-database/</guid><description>Background This post will detect the corona virus spreading based on a real case that took place in Tianjin, China. In this case, there are five confirmed cases of the nCOV pneumonia in the same shopping mall in Tianjin. From the initial three cases, it seems that there is no epidemiological correlation. Against such background, how to uncover the links among the cases?
Evidences have shown the nCOV transmitted from person to person.</description></item><item><title>Nebula Contributor | How to Be a GitHub Contributor in Five Minutes</title><link>https://nebula-graph.io/en/posts/how-to-be-a-github-contributor-in-five-minutes/</link><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/how-to-be-a-github-contributor-in-five-minutes/</guid><description>Contribute to your first open source project in just five minutes with the help of Nebula Graph.
Preface If you don&amp;rsquo;t have a GitHub account, or aren&amp;rsquo;t sure what Git is, please refer to the official website first.
How to Be a GitHub Contributor Fork Fork the Nebula Graph repo by clicking on the fork button on the top of the main page. This will create a copy of this repository in your account.</description></item><item><title>Storage Balance and Data Migration</title><link>https://nebula-graph.io/en/posts/nebula-graph-storage-banlancing-data-migration/</link><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-storage-banlancing-data-migration/</guid><description>In our post Storage Design we mentioned the distributed kv store is managed by the meta service. Both the partition distribution and machine status can be found in the meta service. Users can input use commands in the console to add or remove machines to execute a balance plan for the storage service.
Nebula Graph&amp;lsquo;s service is composed of three parts: graph, storage and meta. In this post, we will introduce how to implement data (partition) and work-load balance in the storage service.</description></item><item><title>An Introduction to Snapshot in Nebula Graph</title><link>https://nebula-graph.io/en/posts/nebula-graph-snapshot-introduction/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-snapshot-introduction/</guid><description>1. Overview 1.1 Terms Names Descriptions Storage Engine Nebula Graph&amp;lsquo;s smallest physical storage unit, currently supports RocksDB and Hbase, this document is only for RocksDB. Partition Nebula Graph&amp;lsquo;s smallest logical storage unit. A StorageEngine contains multiple partitions. A partition is divided into a leader and multiple followers, and Raft protocol is used to ensure data consistency between the leader and the followers.</description></item><item><title>Being on Hacker News Front Page Brought Us Much More than Just 300+ Stars on GitHub within 24 hours</title><link>https://nebula-graph.io/en/posts/nebula-graph-being-on-hacker-new-front-page/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-being-on-hacker-new-front-page/</guid><description>Hacker News is said to be the Holy Grail for tech folks. There&amp;rsquo;s one thing that a company, startups in particular, wants desparately: RIGHT traffic for free.
I have never imagined that we would really make it to the front page, especially when I am actually a new comer to the community.
So what happened? On Jan.15, 2020, I saw a submission on the front page titled &amp;ldquo;Thank HN: You helped me get a new job&amp;rdquo; and thought it was great.</description></item><item><title>Practice Jepsen Test Framework in Nebula Graph</title><link>https://nebula-graph.io/en/posts/practice-jepsen-test-framework-in-nebula-graph/</link><pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/practice-jepsen-test-framework-in-nebula-graph/</guid><description>​This article introduces how Nebula Graph uses Jepsen test framework to ensure system linearizability.
Why Jepsen? Linearizability here specifically means consistency in the CAP theory. In Nebula Graph, we gurantee strong data consistency in our key-value store.
So under such a consistency policy, we need to make sure:
A read happens BEFORE a write operation ends must read the previous write A read happens AFTER a write operation ends must read the current write Strong data consistency relies on a solid chaos testing plan which can affect a distributed system in many unplanned ways, which in turn helps uncover corner cases that are hard to detect in development.</description></item><item><title>Compiling Trouble Shooting: Segmentation Fault and GCC Illegal Instruction</title><link>https://nebula-graph.io/en/posts/segmentation-fault-gcc-illegal-instruction-trouble-shooting/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/segmentation-fault-gcc-illegal-instruction-trouble-shooting/</guid><description>Recently I have been re-organizing and re-compiling all third-party dependencies of Nebula Graph, an open-source distributed graph database. And I have come across two interesting issues and would like to share with you.
Flex Segmentation Fault——Segmentation fault (core dumped) Segmentation fault happened upon compiling Flex：
make[2]: Entering directory &amp;#39;/home/dutor/flex-2.6.4/src&amp;#39; ./stage1flex -o stage1scan.c ./scan.l make[2]: *** [Makefile:1696: stage1scan.c] Segmentation fault (core dumped)  Check coredump with gdb:
Core was generated by `.</description></item><item><title>An Introduction to Nebula Graph’s Query Engine</title><link>https://nebula-graph.io/en/posts/nebula-graph-query-engine-overview/</link><pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-query-engine-overview/</guid><description>The query engine is used to process the Nebula Graph Query Language (nGQL) statements. This article gives an architectural overview of the Nebula Graph query engine.
Above is the overview chart of the query engine. If you are familiar with the SQL execution engine, this should be no stranger to you. In fact, the Nebula Graph query engine is very similar to the modern SQL execution engine except the query language parser and the real actions in the execution plan.</description></item><item><title>Introduction to Nebula Graph Storage Engine</title><link>https://nebula-graph.io/en/posts/nebula-graph-storage-engine-overview/</link><pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-storage-engine-overview/</guid><description>Abstract This document gives an introduction to the storage design of the graph database Nebula Graph.
The Storage Service of Nebula Graph is composed of two parts. One is Meta Service that stores the meta data, the other is Storage Servicethat stores the data. The two services are in two independent processes. The data and deployment are separated but their architectures are almost the same.
Architecture Pict.1 The Architecture of Storage Service</description></item><item><title>Nebula Graph Architecture — A Bird’s View</title><link>https://nebula-graph.io/en/posts/nebula-graph-architecture-overview/</link><pubDate>Tue, 24 Dec 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-architecture-overview/</guid><description>Nebula Graph is an open-source distributed graph database solution. So as an open-source project, we&amp;rsquo;d like those who are interested in graph databases to know as much as possible how Nebula Graph is designed and why it is a highly performant database.
That&amp;rsquo;s how this series of architecture articles have come into play. We are going to cover the following three areas in this series:
A high-level overview of the architecture of Nebula Graph, which is what this article is going to talk about How Nebula Graph&amp;rsquo;s storage engine works How Nebula Graph&amp;rsquo;s query engine works, including the way we have designed nQGL, our graph query language Nebula Graph Architecture Diagram Seen from the diagram above, a fully deployed Nebula Graph cluster contains three services:</description></item><item><title>Nebula Graph in 2019: It’s Worth the Effort</title><link>https://nebula-graph.io/en/posts/nebula-graph-in-2019/</link><pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-in-2019/</guid><description>It&amp;rsquo;s that time of a year when everyone is checking if their New Year Resolutions for 2019 have been met.
So do we.
In 2019, we have done a lot. And there&amp;rsquo;s also a lot that needs to be done down the road.
Looking back, we are thrilled that Nebula Graph has been shipped to so many graph enthusiatists and pinoneer companies who are always seeking for cutting edge technologies for better business outcomes.</description></item><item><title>Dev Log | How to Release jar Package to the Maven Central Repository</title><link>https://nebula-graph.io/en/posts/maven/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/maven/</guid><description>Summary The Maven Central Repository does not support uploading jar packages directly, so you need to release them to some designated third-party Maven repositories, such as the Sonatype OSSRH repository, and then synchronize the jar packages to Maven through this repository. This article details the entire release, synchronization process.
Create a Sonatype Account Click here to create an Sonatype account. Sonatype uses JIRA, a project management software provided by Atlassian, to manage the OSSRH repository.</description></item><item><title>Nebula Graph RC2 Release Note</title><link>https://nebula-graph.io/en/posts/nebula-graph-rc2-release-note/</link><pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/nebula-graph-rc2-release-note/</guid><description>In our RC2 version, we have made several improvements re the nGQL query language, our Storage Engine, CSV Importer, as well as added Java, Python, and Go Clients.
Below is a detailed rundown of the newly added features:
Query engine Support GROUP BY to group items that have the same values, often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG, etc.) to group the result-set by one or more property field.</description></item><item><title>Compare Multiple Projects with this GitHub Stats tool</title><link>https://nebula-graph.io/en/posts/github-stats-tool/</link><pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate><guid>https://nebula-graph.io/en/posts/github-stats-tool/</guid><description>If you have project code hosted on GitHub, chances are you might be interested in checking some numbers and stats such as stars, commits and rull requests.
You might also want to compare some similar projects in terms of the above mentioned stats, for whatever reasons that interest you.
We have the right tool for you: the simple and easy-to-use little tool called GitHub Stats.
Let&amp;rsquo;s dive right in to what we can get out of it.</description></item></channel></rss>