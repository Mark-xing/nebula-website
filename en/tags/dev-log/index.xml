<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dev-log on Nebula Graph - An Open Source, Distributed and High Performant Graph Database</title><link>/nebula-website/en/tags/dev-log/</link><description>Recent content in dev-log on Nebula Graph - An Open Source, Distributed and High Performant Graph Database</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 21 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/nebula-website/en/tags/dev-log/index.xml" rel="self" type="application/rss+xml"/><item><title>Integrating Codecov Test Coverage With Nebula Graph</title><link>/nebula-website/en/posts/integrate-codecov-test-coverage-with-nebula-graph/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/integrate-codecov-test-coverage-with-nebula-graph/</guid><description>A solid testing strategy is a key point to the successful adoption of agile development. Test coverage is a metric used to measure how much of the source code of a program is executed by running a set of tests. It helps developers to identify the code in their application that was not tested.
Ideally, tests against software should define all behaviors of the software. However, this is rarely realized. That is how test coverage comes into play.</description></item><item><title>How Nebula Graph Uses Jepsen to Detect Data Consistency Issues in Raft Implementation</title><link>/nebula-website/en/posts/detect-data-consistency-issues-in-raft-implementing-with-jepsen/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/detect-data-consistency-issues-in-raft-implementing-with-jepsen/</guid><description>Data consistency is a global issue for all distributed systems. Nebula Graph is no exception as a distributed graph database.
Thanks to the separation between query and storage layers, Nebula Graph only exposes simple kv interfaces in the storage layer. Using RocksDB as a backend kv library, Nebula Graph ensures strong data consistency among multiple replicas via the Raft protocol.
Although raft is meant to be more understandable than Paxos, the practice for it in a distributed system is tricky.</description></item><item><title>Automating Your Project Processes with Github Actions</title><link>/nebula-website/en/posts/github-action-automating-project-process/</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/github-action-automating-project-process/</guid><description>Foreword It&amp;rsquo;s common in both company and personal projects to use tools to deal with replicated tasks to improve efficiency.
This is especially true for the front-end development, because tackling with the repetitive tasks manually like building, deployment, unit testing is rather tedious and time-consuming.
This post introduces how we use Github Action to automatically deploy our front-end release in Nebula Graph.
What is Github Action Actions are tasks that can be triggered under certain conditions.</description></item><item><title>Compiling Trouble Shooting: Segmentation Fault and GCC Illegal Instruction</title><link>/nebula-website/en/posts/segmentation-fault-gcc-illegal-instruction-trouble-shooting/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/segmentation-fault-gcc-illegal-instruction-trouble-shooting/</guid><description>Recently I have been re-organizing and re-compiling all third-party dependencies of Nebula Graph, an open-source distributed graph database. And I have come across two interesting issues and would like to share with you.
Flex Segmentation Fault——Segmentation fault (core dumped) Segmentation fault happened upon compiling Flex：
make[2]: Entering directory &amp;#39;/home/dutor/flex-2.6.4/src&amp;#39; ./stage1flex -o stage1scan.c ./scan.l make[2]: *** [Makefile:1696: stage1scan.c] Segmentation fault (core dumped)  Check coredump with gdb:
Core was generated by `.</description></item><item><title>Dev Log | How to Release jar Package to the Maven Central Repository</title><link>/nebula-website/en/posts/maven/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/maven/</guid><description>Summary The Maven Central Repository does not support uploading jar packages directly, so you need to release them to some designated third-party Maven repositories, such as the Sonatype OSSRH repository, and then synchronize the jar packages to Maven through this repository. This article details the entire release, synchronization process.
Create a Sonatype Account Click here to create an Sonatype account. Sonatype uses JIRA, a project management software provided by Atlassian, to manage the OSSRH repository.</description></item></channel></rss>