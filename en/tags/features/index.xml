<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Features on Nebula Graph - An Open Source, Distributed and High Performant Graph Database</title><link>/nebula-website/en/tags/features/</link><description>Recent content in Features on Nebula Graph - An Open Source, Distributed and High Performant Graph Database</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 24 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/nebula-website/en/tags/features/index.xml" rel="self" type="application/rss+xml"/><item><title>How Nebula Graph Automatically Cleans Stale Data with TTL</title><link>/nebula-website/en/posts/clean-stale-data-with-ttl-in-nebula-graph_/</link><pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/clean-stale-data-with-ttl-in-nebula-graph_/</guid><description>Introduction In the era of big data, we are processing data in TB, PB, or even EB. How to deal with huge data sets is a common problem for those working in the database field.
At the core of this problem is whether the data stored in the database is still valid and useful. Therefore, such topics as how to improve the utilization rate of valid data and filter the invalid/outdated data have attracted great concerns globally.</description></item><item><title>How Indexing Works in Nebula Graph</title><link>/nebula-website/en/posts/how-indexing-works-in-nebula-graph/</link><pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/how-indexing-works-in-nebula-graph/</guid><description>Why indexing is needed in a graph database Indexing is an indispensable function in a database system. Graph database is no exception.
An index is actually a sorted data structure in the database management system. Different database systems adopt different sorting structures.
Popular index types include:
B-Tree index B+-Tree index B*-Tree index Hash index Bitmap index Inverted index Each of them uses their own sorting algorithms.
A database index allows efficient data retrieval from databases.</description></item><item><title>Storage Balance and Data Migration</title><link>/nebula-website/en/posts/nebula-graph-storage-banlancing-data-migration/</link><pubDate>Tue, 04 Feb 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/nebula-graph-storage-banlancing-data-migration/</guid><description>In our post Storage Design we mentioned the distributed kv store is managed by the meta service. Both the partition distribution and machine status can be found in the meta service. Users can input use commands in the console to add or remove machines to execute a balance plan for the storage service.
Nebula Graph&amp;lsquo;s service is composed of three parts: graph, storage and meta. In this post, we will introduce how to implement data (partition) and work-load balance in the storage service.</description></item><item><title>An Introduction to Snapshot in Nebula Graph</title><link>/nebula-website/en/posts/nebula-graph-snapshot-introduction/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><guid>/nebula-website/en/posts/nebula-graph-snapshot-introduction/</guid><description>1. Overview 1.1 Terms Names Descriptions Storage Engine Nebula Graph&amp;lsquo;s smallest physical storage unit, currently supports RocksDB and Hbase, this document is only for RocksDB. Partition Nebula Graph&amp;lsquo;s smallest logical storage unit. A StorageEngine contains multiple partitions. A partition is divided into a leader and multiple followers, and Raft protocol is used to ensure data consistency between the leader and the followers.</description></item></channel></rss>